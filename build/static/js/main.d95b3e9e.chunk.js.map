{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["BoxComingSoon","styled","div","getComplementaryColor","color","c","slice","i","parseInt","v","length","toString","TextMessage","props","colorBg","Math","floor","random","style","background","App","useState","g","ceil","Array","keys","setRandom","useEffect","x","setTimeout","clearInterval","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGIA,EAAgBC,IAAOC,IAAV,oNAejB,SAASC,EAAsBC,GAK7B,IAJA,IAAIC,EAAID,EAAME,MAAM,GAClBC,EAAIC,SAASH,EAAG,IAChBI,IAAM,GAAM,EAAIJ,EAAEK,QAAW,EAAIH,GAAGI,SAAS,IAExCF,EAAEC,OAASL,EAAEK,QAClBD,EAAI,IAAMA,EAEZ,MAAO,IAAMA,EAGf,SAASG,EAAYC,GACnB,IAAMC,EAfC,IADaC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBN,SAAS,IAiBlE,OACE,cAACX,EAAD,CACEkB,MAAO,CAAEC,WAAYL,EAASV,MAAOD,EAAsBW,IAD7D,6BAQW,SAASM,IACtB,MAA4BC,oBAAS,WACnC,IAAIC,EAAIP,KAAKQ,KAAqB,GAAhBR,KAAKE,UACvB,OAAO,YAAIO,MAAMF,GAAGG,WAFtB,mBAAOR,EAAP,KAAeS,EAAf,KAaA,OATAC,qBAAU,WACR,IAAMC,EAAIC,YAAW,WACnB,IAAIP,EAAIP,KAAKQ,KAAqB,GAAhBR,KAAKE,UACvBS,EAAU,YAAIF,MAAMF,GAAGG,WACtB,KACH,OAAO,WACLK,cAAcF,MAEf,CAACX,IAEF,mCACGA,EAAOc,KAAI,SAACC,GAAD,OACV,cAACpB,EAAD,GAAkBoB,QCzD1B,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d95b3e9e.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nvar BoxComingSoon = styled.div`\n  display: inline-block;\n  text-align: center;\n  padding: 25px 0;\n  width: 33.3333%;\n  font-weight: 800;\n  font-family: \"Noto Sans JP\", sans-serif;\n  text-transform: uppercase;\n`;\n\nconst generateBackground = () => {\n  const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n  return \"#\" + randomColor;\n};\n\nfunction getComplementaryColor(color) {\n  var c = color.slice(1),\n    i = parseInt(c, 16),\n    v = ((1 << (4 * c.length)) - 1 - i).toString(16);\n\n  while (v.length < c.length) {\n    v = \"0\" + v;\n  }\n  return \"#\" + v;\n}\n\nfunction TextMessage(props) {\n  const colorBg = generateBackground();\n  return (\n    <BoxComingSoon\n      style={{ background: colorBg, color: getComplementaryColor(colorBg) }}\n    >\n      Coming soon....\n    </BoxComingSoon>\n  );\n}\n\nexport default function App() {\n  const [random, setRandom] = useState(() => {\n    let g = Math.ceil(Math.random() * 20);\n    return [...Array(g).keys()];\n  });\n  useEffect(() => {\n    const x = setTimeout(() => {\n      let g = Math.ceil(Math.random() * 20);\n      setRandom([...Array(g).keys()]);\n    }, 500);\n    return () => {\n      clearInterval(x);\n    };\n  }, [random]);\n  return (\n    <>\n      {random.map((item) => (\n        <TextMessage key={item} />\n      ))}\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}